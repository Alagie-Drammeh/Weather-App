{"version":3,"sources":["WeatherDataComponenet.js","App.js","index.js"],"names":["WeatherDataComponenet","nextprops","nextstate","temp","this","props","city","console","log","feelsLike","src","icon","alt","humidity","pressure","maxTemp","minTemp","Component","App","state","cityName","weatherData","myCityName","getUsercity","e","setState","target","value","formSubmission","preventDefault","trim","fetchWeatherData","fetch","process","then","response","json","data","catch","err","animationClass","changeState","bind","className","onSubmit","type","placeholder","onChange","main","temp_max","temp_min","feels_like","weather","reactDOM","render","document","getElementById"],"mappings":"0LAGqBA,E,2KAKjB,SAAsBC,EAAUC,GAC5B,OAAID,EAAUE,OAAOC,KAAKC,MAAMF,MAAQF,EAAUK,OAAOF,KAAKC,MAAMC,O,oBAOxE,WAEI,OADAC,QAAQC,IAAI,iCAER,6BACI,gDAAsBJ,KAAKC,MAAMI,UAAjC,KACA,2BAAIL,KAAKC,MAAMC,MACf,yBAAKI,IAAG,2CAAuCN,KAAKC,MAAMM,KAAlD,WAAiEC,IAAI,KAC7E,6BACI,gCAAMR,KAAKC,MAAMF,KAAjB,MAEJ,6BACI,+BAAKC,KAAKC,MAAMQ,SAAhB,KACA,2BAAIT,KAAKC,MAAMS,UACf,2BAAIV,KAAKC,MAAMU,SACf,2BAAIX,KAAKC,MAAMW,e,GA3BgBC,aCO9BC,G,wDAErB,WAAYb,GAAO,IAAD,8BAChB,cAAMA,IAmBNc,MAAM,CACJC,SAAS,GACTC,YAAY,KACZC,WAAW,IAvBG,EA8BhBC,YAAY,SAACC,GACX,EAAKC,SAAS,CACZL,SAAUI,EAAEE,OAAOC,SAhCP,EAqChBC,eAAe,SAACJ,GAEdA,EAAEK,iBACFtB,QAAQC,IAAI,kBACZD,QAAQC,IAAI,EAAKW,MAAMC,UACW,KAA/B,EAAKD,MAAMC,SAASU,QACrB,EAAKC,iBAAiB,EAAKZ,MAAMC,WA3CrB,EAoDhBW,iBAAiB,SAACzB,GAChB0B,MAAM,qDAAD,OAAsD1B,EAAtD,kBAAoE2B,mCAApE,iBACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAI,OAAE,EAAKZ,SAAS,CAACJ,YAAagB,EAAKf,WAAW,EAAKH,MAAMC,cAClEkB,OAAM,SAAAC,GAAG,OAAEhC,QAAQC,IAAI+B,OAtDxB,EAAKpB,MAAQ,CACXqB,eAAgB,QAElB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALL,E,+CAOlB,WACmC,SAA9BtC,KAAKe,MAAMqB,eACZpC,KAAKqB,SAAS,CACZe,eAAgB,gBAGlBpC,KAAKqB,SAAS,CACZe,eAAgB,W,+BA6CpB,WAEEpC,KAAK2B,iBAAiB,Y,oBAGxB,WAEExB,QAAQC,IAAIyB,oCACZ,IAAII,EAAKjC,KAAKe,MAAME,YAGpB,OACE,yBAAKsB,UAAU,gBACf,qDACA,0BAAMC,SAAUxC,KAAKwB,gBACnB,2BAAOiB,KAAK,OAAOC,YAAY,uBAAuBC,SAAU3C,KAAKmB,cACrE,qDAKDc,GAAQ,kBAAC,EAAD,CACR/B,KAAMF,KAAKe,MAAMG,WACjBnB,KAAMkC,EAAKW,KAAK7C,KAChBY,QAASsB,EAAKW,KAAKC,SACnBjC,QAASqB,EAAKW,KAAKE,SACnBrC,SAAUwB,EAAKW,KAAKnC,SACpBJ,UAAW4B,EAAKW,KAAKG,WACrBxC,KAAM0B,EAAKe,QAAQ,GAAGzC,Y,GAzFIM,c,cCLjCoC,EAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,U","file":"static/js/main.c9cc8cfc.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nexport default class WeatherDataComponenet extends Component {\n\n    \n\n\n    shouldComponentUpdate(nextprops,nextstate){\n        if (nextprops.temp===this.props.temp && nextprops.city===this.props.city){\n          return false\n        }\n        return true\n      }\n    \n\n    render() {\n        console.log(\"render from weather component\")\n        return (\n            <div>\n                <p>Feels Like ------ {this.props.feelsLike} </p>\n                <p>{this.props.city}</p>\n                <img src= {`http://openweathermap.org/img/wn/${this.props.icon}@4x.png`} alt=\"\"/>\n                <div>\n                    <h2> {this.props.temp} </h2>\n                </div>\n                <div>\n                    <p> {this.props.humidity} </p>\n                    <p>{this.props.pressure}</p>\n                    <p>{this.props.maxTemp}</p>\n                    <p>{this.props.minTemp}</p>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport WeatherDataComponenet from './WeatherDataComponenet'\nimport \"./weather.css\"\n\n// let APIKEY=\"d4b55633efb0d7c259135daf654b16fd\n\n\n\n\n\nexport default class App extends Component {\n\nconstructor(props){\n  super(props);\n    this.state = {\n      animationClass: 'test'\n    }\n    this.changeState = this.changeState.bind(this);\n}\nchangeState(){\n  if(this.state.animationClass === 'test'){\n    this.setState({\n      animationClass: 'test paused'\n    });\n  }else{\n    this.setState({\n      animationClass: 'test'\n    });\n  }\n}\n   \n \n  state={\n    cityName:\"\",\n    weatherData:null,\n    myCityName:\"\"\n\n  }\n\n\n\n\n  getUsercity=(e)=>{\n    this.setState({\n      cityName: e.target.value\n    })\n  }\n\n\n  formSubmission=(e)=>{\n    //prevent the default behaviour of the form\n    e.preventDefault();\n    console.log(\"form submitted\");\n    console.log(this.state.cityName);\n    if(this.state.cityName.trim() !== \"\"){\n      this.fetchWeatherData(this.state.cityName)\n    }\n    }\n    \n\n\n\n\n\n  fetchWeatherData=(city)=>{\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}&unit=metric`)\n    .then(response=>response.json())\n    .then(data=>this.setState({weatherData: data,myCityName:this.state.cityName }))\n    .catch(err=>console.log(err));\n  }\n\n  componentDidMount(){\n    //onload\n    this.fetchWeatherData(\"berlin\")\n  }\n\n  render() {\n    \n    console.log(process.env.REACT_APP_API_KEY)\n    let data=this.state.weatherData\n    // console.log(weatherData)\n     \n    return (\n      <div className=\"weather-card\">\n      <h1>King Bolo Weather App</h1>\n      <form onSubmit={this.formSubmission}>\n        <input type=\"text\" placeholder=\"Enter Your City Name\" onChange={this.getUsercity}/>\n        <button>Get Weather Data</button>\n      </form>\n\n\n\n      {data && <WeatherDataComponenet\n       city={this.state.myCityName}\n       temp={data.main.temp}\n       maxTemp={data.main.temp_max}\n       minTemp={data.main.temp_min}\n       humidity={data.main.humidity}\n       feelsLike={data.main.feels_like}\n       icon={data.weather[0].icon}\n      /> }\n\n\n\n\n      \n\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\"\nimport App from \"./App.js\"\nimport reactDOM from \"react-dom\"\n\nreactDOM.render(<App/>,document.getElementById(\"root\"))"],"sourceRoot":""}